/* Frame.java
 *
 * Copyright (C) 2015 Raphael Jolly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package linoleum.application;

import java.awt.Component;
import java.beans.PropertyVetoException;
import java.net.URI;
import java.util.prefs.Preferences;
import javax.swing.Icon;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenuBar;
import javax.swing.JRootPane;

public class Frame extends JInternalFrame implements App {
	private ApplicationManager manager;
	private JMenuBar savedMenuBar;
	private JMenuBar menuBar;
	private String type;
	private Icon icon;
	private URI uri;
	private boolean ready;

	public Frame() {
		initComponents();
	}

	public Frame(final String title) {
		super(title, true, true, true, true);
		initComponents();
	}

	public void setApplicationManager(final ApplicationManager manager) {
		if (getDesktopPane() == null) {
			open(manager.getDesktopPane());
			this.manager = manager;
		}
		manager.select(this);
	}

	public ApplicationManager getApplicationManager() {
		return manager;
	}

	@Override
	public void setJMenuBar(final JMenuBar menuBar) {
		this.menuBar = menuBar;
	}

	@Override
	public JMenuBar getJMenuBar() {
		return menuBar;
	}

	public void setIcon(final Icon icon) {
		this.icon = icon;
	}

	@Override
	public Icon getIcon() {
		return icon;
	}

	public void setMimeType(final String type) {
		this.type = type;
	}

	@Override
	public String getMimeType() {
		return type;
	}

	public void setURI(final URI uri) {
		this.uri = uri;
		open();
	}

	public URI getURI() {
		return uri;
	}

	protected Frame getFrame() {
		return this;
	}

	public final void open(final ApplicationManager manager, final URI uri) {
		final JDesktopPane desktop = manager.getDesktopPane();
		Frame frame = find(desktop, uri);
		if (frame == null) {
			frame = find(desktop, null);
		}
		if (frame == null) {
			frame = getFrame();
		}
		frame.setApplicationManager(manager);
		if (!uri.equals(frame.getURI())) {
			frame.setURI(uri);
		}
	}

	public final void open(final ApplicationManager manager) {
		final Frame frame = getFrame();
		frame.setApplicationManager(manager);
	}

	private Frame find(final JDesktopPane desktop, final URI uri) {
		for (final JInternalFrame c : desktop.getAllFrames()) {
			if (getName().equals(c.getName()) && c instanceof Frame) {
				final Frame frame = (Frame)c;
				if (uri == null?null == frame.getURI():uri.equals(frame.getURI())) {
					return frame;
				}
			}
		}
		return null;
	}

	protected void open() {
	}

	protected void close() {
	}

	public void open(final JDesktopPane desktop) {
		loadBounds();
		desktop.add(this);
	}

	private void loadBounds() {
		final Preferences prefs = Preferences.userNodeForPackage(getClass());
		final int x = prefs.getInt(getName() + ".x", getX());
		final int y = prefs.getInt(getName() + ".y", getY());
		final int width = prefs.getInt(getName() + ".width", getWidth());
		final int height = prefs.getInt(getName() + ".height", getHeight());
		setBounds(x, y, width, height);
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                setName(getClass().getSimpleName());
                addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
                        public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                        }
                        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                                formInternalFrameClosing(evt);
                        }
                        public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                        }
                        public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                        }
                        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                        }
                        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                                formInternalFrameActivated(evt);
                        }
                        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                                formInternalFrameDeactivated(evt);
                        }
                });
                addComponentListener(new java.awt.event.ComponentAdapter() {
                        public void componentResized(java.awt.event.ComponentEvent evt) {
                                formComponentResized(evt);
                        }
                        public void componentMoved(java.awt.event.ComponentEvent evt) {
                                formComponentMoved(evt);
                        }
                        public void componentShown(java.awt.event.ComponentEvent evt) {
                                formComponentShown(evt);
                        }
                });

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
		close();
        }//GEN-LAST:event_formInternalFrameClosing

        private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
		final JRootPane panel = getDesktopPane().getRootPane();
		if (savedMenuBar == null) savedMenuBar = panel.getJMenuBar();
		if (menuBar != null) panel.setJMenuBar(menuBar);
        }//GEN-LAST:event_formInternalFrameActivated

        private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeactivated
		final JRootPane panel = getDesktopPane().getRootPane();
		if (menuBar != null) panel.setJMenuBar(savedMenuBar);
        }//GEN-LAST:event_formInternalFrameDeactivated

        private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
		final JDesktopPane desktop = getDesktopPane();
		if (ready) {
			final Preferences prefs = Preferences.userNodeForPackage(getClass());
			final Component c = evt.getComponent();
			prefs.putInt(getName() + ".x", c.getX());
			prefs.putInt(getName() + ".y", c.getY());
		}
        }//GEN-LAST:event_formComponentMoved

        private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
		final JDesktopPane desktop = getDesktopPane();
		if (ready) {
			final Preferences prefs = Preferences.userNodeForPackage(getClass());
			final Component c = evt.getComponent();
			prefs.putInt(getName() + ".width", c.getWidth());
			prefs.putInt(getName() + ".height", c.getHeight());
		}
        }//GEN-LAST:event_formComponentResized

        private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
		ready = true;
        }//GEN-LAST:event_formComponentShown

        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
}
